//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace client.ServiceChat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChat.IServiceChat", CallbackContract=typeof(client.ServiceChat.IServiceChatCallback))]
    public interface IServiceChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connection", ReplyAction="http://tempuri.org/IServiceChat/ConnectionResponse")]
        System.ValueTuple<int, string[]> Connection(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connection", ReplyAction="http://tempuri.org/IServiceChat/ConnectionResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<int, string[]>> ConnectionAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnection", ReplyAction="http://tempuri.org/IServiceChat/DisconnectionResponse")]
        void Disconnection(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnection", ReplyAction="http://tempuri.org/IServiceChat/DisconnectionResponse")]
        System.Threading.Tasks.Task DisconnectionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SandMsg")]
        void SandMsg(int id, string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SandMsg")]
        System.Threading.Tasks.Task SandMsgAsync(int id, string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/CallbackMsg")]
        void CallbackMsg(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatChannel : client.ServiceChat.IServiceChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChatClient : System.ServiceModel.DuplexClientBase<client.ServiceChat.IServiceChat>, client.ServiceChat.IServiceChat {
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.ValueTuple<int, string[]> Connection(string name) {
            return base.Channel.Connection(name);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<int, string[]>> ConnectionAsync(string name) {
            return base.Channel.ConnectionAsync(name);
        }
        
        public void Disconnection(int id) {
            base.Channel.Disconnection(id);
        }
        
        public System.Threading.Tasks.Task DisconnectionAsync(int id) {
            return base.Channel.DisconnectionAsync(id);
        }
        
        public void SandMsg(int id, string msg) {
            base.Channel.SandMsg(id, msg);
        }
        
        public System.Threading.Tasks.Task SandMsgAsync(int id, string msg) {
            return base.Channel.SandMsgAsync(id, msg);
        }
    }
}
